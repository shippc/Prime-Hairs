generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int         @id @default(autoincrement())
  email     String      @unique
  password  String
  profile   Profile?    @relation(fields: [profileId], references: [id])
  profileId Int?        @unique
  logAccess LogAccess[] // Relacionamento inverso com LogAccess
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User?   @relation
}

model LogAccess {
  id           Int      @id @default(autoincrement())
  userId       Int
  accessDate   DateTime @default(now())
  accessTime   DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Entity {
  id                Int               @id @default(autoincrement())
  name              String
  cpf               String?
  rg                String?
  email             String?
  type              String
  socialName        String?
  sex               String?
  phone             String?
  typePerson        String
  address           Address?
  employees         Employee[]
  appointments      Appointment[]
  loyaltyPrograms   LoyaltyProgram[]
  productLoyalties  ProductLoyalty[]
  serviceLoyalties  ServiceLoyalty[]
  sales             Sale[]
  purchases         Purchase[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?
}

model Address {
  id           Int      @id @default(autoincrement())
  entityId     Int      @unique
  entity       Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  type         String
  street       String
  cep          String
  district     String
  city         String
  state        String
  number       String
  principal    Boolean
  complement   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime?
}

model Employee {
  id                Int                @id @default(autoincrement())
  entityId          Int
  entity            Entity             @relation(fields: [entityId], references: [id], onDelete: Cascade)
  position          String?
  salary            Decimal?
  workload          Int?
  userId            Int
  appointments      Appointment[]
  functionalSchedules FunctionalSchedule[]
  sales             Sale[]
  purchases         Purchase[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime?
}

model Appointment {
  id           Int      @id @default(autoincrement())
  entityId     Int
  employeeId   Int
  entity       Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  appointment  Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime?
}

model FunctionalSchedule {
  id           Int       @id @default(autoincrement())
  employeeId   Int
  employee     Employee   @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date         DateTime
  available    Boolean
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?
}

model LoyaltyProgram {
  id               Int      @id @default(autoincrement())
  entityId         Int
  entity           Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  firstVisitDate   DateTime?
  lastVisitDate    DateTime?
  visitCount       Int
  averageRating    Decimal?
  totalPoints      Int
  loyaltyLevel     String?
  discount         Decimal?
  createdAt        DateTime @default(now())
  updatedAt        DateTime?
}

model ProductLoyalty {
  id               Int      @id @default(autoincrement())
  entityId         Int
  productId        Int
  entity           Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantitySold     Int
  saleValue        Decimal?
  rating           Decimal?
  points           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime?
}

model ServiceLoyalty {
  id               Int      @id @default(autoincrement())
  entityId         Int
  serviceId        Int
  entity           Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  service          Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  quantitySold     Int
  saleValue        Decimal?
  rating           Decimal?
  points           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime?
}

model Product {
  id               Int             @id @default(autoincrement())
  description      String
  image            String?
  barcode          String?
  brand            String?
  line             String?
  technicalFile    String?  
  price            Decimal? 
  stockBalance     Int
  minimumStock     Int
  maximumStock     Int
  ipi              Decimal? 
  pis              Decimal? 
  cofins           Decimal? 
  icms             Decimal? 
  iss              Decimal? 
  purchaseValue    Decimal? 
  lastPurchaseDate DateTime?
  productLoyalties ProductLoyalty[]
  stocks           Stock[]
  logStocks        LogStock[]
  purchaseOrders   PurchaseOrder[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime?
}

model Stock {
  id               Int      @id @default(autoincrement())
  productId        Int
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  balance          Int
  lastPurchaseDate DateTime?
  expirationDate   DateTime?
}

model Service {
  id               Int             @id @default(autoincrement())
  description      String
  duration         Int?
  price            Decimal?
  image            String?
  serviceLoyalties ServiceLoyalty[]
  createdAt        DateTime @default(now())
  updatedAt        DateTime?
}

model Sale {
  id               Int        @id @default(autoincrement())
  entityId         Int
  sellerId         Int
  entity           Entity     @relation(fields: [entityId], references: [id], onDelete: Cascade)
  seller           Employee   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  logStocks        LogStock[]
  discount         Decimal?
  createdAt        DateTime @default(now())
}

model LogStock {
  id               Int       @id @default(autoincrement())
  productId        Int
  saleId           Int?
  purchaseId       Int?
  product          Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  sale             Sale?     @relation(fields: [saleId], references: [id], onDelete: SetNull)
  purchase         Purchase? @relation(fields: [purchaseId], references: [id], onDelete: SetNull)
  movementType     String
  previousBalance  Int
  differenceBalance Int
  newBalance       Int
  createdAt        DateTime @default(now())
}

model Purchase {
  id               Int              @id @default(autoincrement())
  supplierId       Int
  buyerId          Int
  supplier         Entity           @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  buyer            Employee         @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  logStocks        LogStock[]
  purchaseOrders   PurchaseOrder[]
  discount         Decimal?
  createdAt        DateTime @default(now())
}

model PurchaseOrder {
  id               Int      @id @default(autoincrement())
  productId        Int
  purchaseId       Int
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchase         Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  quantity         Int
  salePrice        Decimal
  createdAt        DateTime @default(now())
}