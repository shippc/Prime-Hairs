generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String?
  entities  Entity[] @relation("CreatorUpdater")
}

model Profile {
  id       String   @id @default(cuid())
  bio      String?
  user     User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String?
}

model LogAccess {
  id           Int      @id @default(autoincrement())
  userId       String
  accessDate   DateTime @default(now())
  accessTime   DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Entity {
  id           Int      @id @default(autoincrement())
  name         String
  cpf          String?
  rg           String?
  email        String?
  type         String
  socialName   String?
  sex          String?
  phone        String?
  typePerson   String
  address      Address?
  creatorId    String?
  creator      User?    @relation("CreatorUpdater", fields: [creatorId], references: [id], onDelete: SetNull)
  updaterId    String?
  updater      User?    @relation("CreatorUpdater", fields: [updaterId], references: [id], onDelete: SetNull)
  createdAt    DateTime @default(now())
  updatedAt    DateTime?
}

model Address {
  id           Int      @id @default(autoincrement())
  entity       Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  entityId     Int
  type         String
  street       String
  cep          String
  district     String
  city         String
  state        String
  number       String
  principal    Boolean
  complement   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime?
}

model Employee {
  id           Int      @id @default(autoincrement())
  entityId     Int
  entity       Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  position     String?
  salary       Decimal?
  workload     Int?
  userId       String
  creatorId    String?
  creator      User?    @relation("CreatorUpdater", fields: [creatorId], references: [id], onDelete: SetNull)
  updaterId    String?
  updater      User?    @relation("CreatorUpdater", fields: [updaterId], references: [id], onDelete: SetNull)
  createdAt    DateTime @default(now())
  updatedAt    DateTime?
}

model Product {
  id             Int      @id @default(autoincrement())
  description    String
  image          String?
  barcode        String?
  brand          String?
  line           String?
  technicalFile  String?  
  price          Decimal? 
  stockBalance   Int
  minimumStock   Int
  maximumStock   Int
  ipi            Decimal? 
  pis            Decimal? 
  cofins         Decimal? 
  icms           Decimal? 
  iss            Decimal? 
  purchaseValue  Decimal? 
  lastPurchaseDate DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime?
  creatorId      String?
  creator        User?    @relation("CreatorUpdater", fields: [creatorId], references: [id], onDelete: SetNull)
  updaterId      String?
  updater        User?    @relation("CreatorUpdater", fields: [updaterId], references: [id], onDelete: SetNull)
}


model Service {
  id           Int       @id @default(autoincrement())
  description  String
  duration     Int?
  price        Decimal?  // Remover a especificação de precisão e escala
  image        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? // Manter como opcional se for o caso
}


model Appointment {
  id           Int      @id @default(autoincrement())
  entityId     Int
  employeeId   Int
  entity       Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  appointment  Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime?
}

model FunctionalSchedule {
  id           Int      @id @default(autoincrement())
  employeeId   Int
  employee     Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  date         DateTime
  available    Boolean
  createdAt    DateTime @default(now())
  updatedAt    DateTime?
}

model LoyaltyProgram {
  id               Int      @id @default(autoincrement())
  entityId         Int
  entity           Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  firstVisitDate   DateTime?
  lastVisitDate    DateTime?
  visitCount       Int
  averageRating    Decimal? // Remover (5, 2)?
  totalPoints      Int
  loyaltyLevel     String?
  discount         Decimal?  // Remover (5, 2)?
  createdAt        DateTime @default(now())
  updatedAt        DateTime?
}


model ProductLoyalty {
  id               Int      @id @default(autoincrement())
  entityId         Int
  productId        Int
  entity           Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  product          Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantitySold     Int
  saleValue        Decimal?  // Removido (10, 2)
  rating           Decimal?  // Removido (5, 2)
  points           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime?
}


model ServiceLoyalty {
  id               Int      @id @default(autoincrement())
  entityId         Int
  serviceId        Int
  entity           Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  service          Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  quantitySold     Int
  saleValue        Decimal?  // Remover (10, 2)
  rating           Decimal?  // Remover (5, 2)?
  points           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime?
}


model Stock {
  id              Int      @id @default(autoincrement())
  productId       Int
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  balance         Int
  lastPurchaseDate DateTime?
  expirationDate  DateTime?
}

model Sale {
  id           Int      @id @default(autoincrement())
  entityId     Int
  sellerId     Int
  entity       Entity   @relation(fields: [entityId], references: [id], onDelete: Cascade)
  seller       Employee @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  discount     Decimal? // Removido (10, 4)
  createdAt    DateTime @default(now())
}


model LogStock {
  id               Int      @id @default(autoincrement())
  productId        Int
  saleId           Int?
  purchaseId       Int?
  product          Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  sale             Sale?    @relation(fields: [saleId], references: [id], onDelete: SetNull)
  purchase         Purchase? @relation(fields: [purchaseId], references: [id], onDelete: SetNull)
  movementType     String
  previousBalance  Int
  differenceBalance Int
  newBalance       Int
  createdAt        DateTime @default(now())
}

model Purchase {
  id           Int      @id @default(autoincrement())
  supplierId   Int
  buyerId      Int
  supplier     Entity   @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  buyer        Employee @relation(fields: [buyerId], references: [id], onDelete: Cascade)
  discount     Decimal? // Removido (10, 4)
  createdAt    DateTime @default(now())
}


model PurchaseOrder {
  id           Int      @id @default(autoincrement())
  productId    Int
  purchaseId   Int
  product      Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  purchase     Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  quantity     Int
  salePrice    Decimal  // Removido (10, 2)
  createdAt    DateTime @default(now())
}

